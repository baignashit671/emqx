##--------------------------------------------------------------------
## EMQX OCPP Gateway
##--------------------------------------------------------------------

## The default Heartbeat time interval
ocpp.default_heartbeat_interval = 60s

## The backoff for hearbeat checking times
##
## Value: integer()
## Default: 1
ocpp.heartbeat_checking_times_backoff = 1

## Upload stream topic to notify third-party system whats messges/events
## reported by Charge Point
##
## Avaiable placeholders:
##  - cid: Charge Point ID
##  - clientid: Equal to Charge Point ID
##  - action: Message Name in OCPP
ocpp.upstream.topic = ocpp/cp/${cid}

## UpStream topic override.
##
ocpp.upstream.topic.BootNotification = ocpp/cp/${cid}/Notify/${action}

## Upload stream ...
##
ocpp.upstream.reply_topic = ocpp/cp/${cid}/Reply

ocpp.upstream.error_topic = ocpp/cp/${cid}/Reply

##
##
#ocpp.upstream.strit_mode = false

## The upstream Request message timeout.
## The expiration time of the Request message sent by client to server. When no
## confirmation message is received from dnstream topic after this time, emqx
## discards the Request message.
ocpp.upstream.awaiting_timeout = 30s

## Download stream topic to receive request/control messages from third-party
## system.
##
## This value is a wildcard topic name that subscribed by every connected Charge
## Point.
#ocpp.messaging_opts.dnstream = ocpp/${clientid}/dn/${type}/${action}/${id}
ocpp.dnstream.topic = ocpp/cs/${cid}

##
##
#ocpp.dnstream.strit_mode = false

## The downstream Request message retry interval.
## When no response to the Request message is received, the server will keep
## resending the message at that interval.
#ocpp.dnstream.retry_interval = 30s

## The maximum message queue length for dnstream message delivery.
##
## Default: 10
#ocpp.dnstream.max_mqueue_len = 10

## Whether to enable message format legality checking.
## EMQX checks the message format of the upstream and dnstream against the
## format defined in json-schema.
## When the check fails, emqx will reply with a corresponding answer message.
##
## Enum with:
##  - all: check all messages
##  - upstream_only: check upstream messages only
##  - dnstream_only: check dnstream messages only
##  - disable: don't check any messages
##
## Default: all
#ocpp.message_format_checking = all

## JSON Schema directory for OCPP message definations.
##
## Default: ${application}/priv/schemas
#ocpp.json_schema_dir = ${application_priv}/schemas

#ocpp.json_schema_id_prefix = urn:OCPP:1.6:2019:12:

## Listener Configuration ##

ocpp.listener.ws.default = 0.0.0.0:33033

ocpp.listener.ws.default.ocpp_path = /ocpp

ocpp.listener.ws.default.acceptors = 16

ocpp.listener.ws.default.max_connections = 1024000

ocpp.listener.ws.default.max_conn_rate = 1000

#ocpp.listener.ws.default.support_subprotocols = ocpp1.6, ocpp2.0

#ocpp.listener.ws.default.proxy_protocol = off

#ocpp.listener.ws.default.proxy_address_header = X-Forward-For

#ocpp.listener.ws.default.proxy_port_header = X-Forward-Port

ocpp.listener.wss.default = 0.0.0.0:33034
ocpp.listener.wss.default.acceptors = 16
ocpp.listener.wss.default.ocpp_path = /ocpp/tls
ocpp.listener.wss.default.max_connections = 1024000
ocpp.listener.wss.default.max_conn_rate = 1000
ocpp.listener.wss.default.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA

## Ciphers for TLS PSK.
## Note that 'ocpp.listener.wss.default.ciphers' and 'ocpp.listener.wss.default.psk_ciphers' cannot
## be configured at the same time.
## See 'https://tools.ietf.org/html/rfc4279#section-2'.
##ocpp.listener.wss.default.psk_ciphers = RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA

## TLS versions only to protect from POODLE attack.
##
## See: listener.ssl.$name.tls_versions
##
## Value: String, seperated by ','
## NOTE: Do not use tlsv1.3 if emqx is running on OTP-22 or earlier
#ocpp.listener.wss.default.tls_versions = tlsv1.3,tlsv1.2,tlsv1.1,tlsv1

## Path to the file containing the user's private PEM-encoded key.
##
## Value: File
ocpp.listener.wss.default.keyfile = /etc/emqx/certs/key.pem

## Path to a file containing the user certificate.
##
## Value: File
ocpp.listener.wss.default.certfile = /etc/emqx/certs/cert.pem

## Path to the file containing PEM-encoded CA certificates.
##
## Value: File
#ocpp.listener.wss.default.cacertfile = /etc/emqx/certs/cacert.pem

## Maximum number of non-self-issued intermediate certificates that
## can follow the peer certificate in a valid certification path.
##
## Value: Number
#ocpp.listener.wss.default.depth = 10

## String containing the user's password. Only used if the private keyfile
## is password-protected.
##
## Value: String
##ocpp.listener.wss.default.key_password = yourpass
