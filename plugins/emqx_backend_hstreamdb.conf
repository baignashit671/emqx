##====================================================================
## Configuration for EMQX HStreamDB Backend
##====================================================================

######################################################################
## Producers and their configurations. Producers are used for
## * storing messages on publish;
## * logging client connection and session information.

## HstreamDB initial discovery address for a producer.
##
## Value: String
## Note: scheme should be `hstreams` for ssl connections
## i.e. hstreams://127.0.0.1:6570
backend.hstreamdb.producer.producer1.url = hstream://127.0.0.1:6570

## HstreamDB stream name to write to.
##
## Value: String
backend.hstreamdb.producer.producer1.stream = mqtt_connect

## GRPC pool size for discovery client.
##
## Value: String
backend.hstreamdb.producer.producer1.grpc_pool_size = 4

## Number of batch aggregators.
##
## Value: Integer
backend.hstreamdb.producer.producer1.buffer_pool_size = 4

## Number of batch writers.
##
## Value: Integer
backend.hstreamdb.producer.producer1.writer_pool_size = 4

## Maximum batch size (in records) for a batch aggregator.
## Note: recodrs for different shards are batched separately in an aggregator.
##
## Value: Integer
backend.hstreamdb.producer.producer1.batch_size = 10

## Timeout (in milliseconds) for the writer operations.
##
## Value: Integer
backend.hstreamdb.producer.producer1.writer_grpc_timeout = 5000

## Maximum amount of time (in milliseconds) to wait for a batch to be filled
## before sending it to the writer. If the batch is not filled within this
## time, it will be sent to the writer anyway.
##
## Value: Integer
backend.hstreamdb.producer.producer1.batch_flush_interval = 100

## Maximum amount of time (in milliseconds) for a batch to written to the
## database. If the batch is not written within this time, it will be
## discarded, and the cliens will receive a timeout error.
##
## Value: Integer
backend.hstreamdb.producer.producer1.batch_timeout = 10000

## Interval (in milliseconds) for periodic shard update for a stream.
##
## Value: String
backend.hstreamdb.producer.producer1.shard_update_interval = 300000


## HstreamDB ssl configuration. Should match the url scheme.
##
## Value: on | off
#backend.hstreamdb.producer.producer1.ssl = off

## CA certificate.
##
## Value: File
#backend.hstreamdb.producer.producer1.cacertfile = path/to/your/cacertfile

## Client ssl certificate.
##
## Value: File
#backend.hstreamdb.producer.producer1.certfile = path/to/your/certfile

## Client ssl keyfile.
##
## Value: File
#backend.hstreamdb.producer.producer1.keyfile = path/to/your/keyfile

## Client ssl verify.
##
## Value: verify_none | verify_peer
#backend.hstreamdb.producer.producer1.verify = verify_none

## Client ssl server_name_indication.
##
## Value: String
#backend.hstreamdb.producer.producer1.server_name_indication = sni

backend.hstreamdb.producer.producer2.url = hstream://127.0.0.1:6570
backend.hstreamdb.producer.producer2.stream = mqtt_message
backend.hstreamdb.producer.producer2.grpc_pool_size = 4
backend.hstreamdb.producer.producer2.buffer_pool_size = 8
backend.hstreamdb.producer.producer2.writer_pool_size = 16
backend.hstreamdb.producer.producer2.batch_size = 200
backend.hstreamdb.producer.producer2.writer_grpc_timeout = 5000
backend.hstreamdb.producer.producer2.batch_flush_interval = 100
backend.hstreamdb.producer.producer2.batch_timeout = 10000
# backend.hstreamdb.producer.producer2.ssl = off
# backend.hstreamdb.producer.producer2.cacertfile = path/to/your/cacertfile
# backend.hstreamdb.producer.producer2.certfile = path/to/your/certfile
# backend.hstreamdb.producer.producer2.keyfile = path/to/your/keyfile
# backend.hstreamdb.producer.producer2.verify = verify_none
# backend.hstreamdb.producer.producer2.server_name_indication = sni

################################################################################
## Reader and their configurations Producers are used for fetching
## messages on session subscribe.

## HstreamDB initial discovery address for a reader.
##
## Value: String
## Note: scheme should be `hstreams` for ssl connections
## i.e. hstreams://127.0.0.1:6570
backend.hstreamdb.reader.reader1.url = hstream://127.0.0.1:6570

## HstreamDB stream name to read from.
##
## Value: String
backend.hstreamdb.reader.reader1.stream = mqtt_message

## GRPC pool size for discovery client and reading clients.
##
## Value: Integer
backend.hstreamdb.reader.reader1.grpc_pool_size = 4

## Timeout (in milliseconds) for GRPC calls.
##
## Value: Integer
backend.hstreamdb.reader.reader1.grpc_timeout = 5000

## Number of reader processes. Each reader process has a dedicated
## discovery client and a client per HSreamDB server.
##
## Value: Integer
backend.hstreamdb.reader.reader1.pool_size = 4

## HstreamDB ssl configuration. Should match the url scheme.
##
## Value: on | off
#backend.hstreamdb.reader.reader1.ssl = off

## CA certificate.
##
## Value: File
#backend.hstreamdb.reader.reader1.cacertfile = path/to/your/cacertfile

## Client ssl certificate.
##
## Value: File
#backend.hstreamdb.reader.reader1.certfile = path/to/your/certfile

## Client ssl keyfile.
##
## Value: File
#backend.hstreamdb.reader.reader1.keyfile = path/to/your/keyfile

## Client ssl verify.
##
## Value: verify_none | verify_peer
#backend.hstreamdb.reader.reader1.verify = verify_none

## Client ssl server_name_indication.
##
## Value: String
#backend.hstreamdb.reader.reader1.server_name_indication = sni

######################################################################
## Offset storage

## Interval (in milliseconds) for periodic flushing acked message ids.
##
## Value: Integer
backend.hstreamdb.offsets.flush_interval = 5000

## Interval (in milliseconds) for running trim operation on the producers' streams.
##
## Value: Integer
backend.hstreamdb.offsets.trim_interval = 1800000

## Timeout (in milliseconds) for trim operation.
##
## Value: Integer
backend.hstreamdb.offsets.trim_timeout = 300000

## HStreamDB Backend Rules
backend.hstreamdb.hook.client.connected.1    = {"producer": "producer1"}
backend.hstreamdb.hook.client.disconnected.1 = {"producer": "producer1"}
backend.hstreamdb.hook.session.subscribed.1  = {"topic": "sub1/#", "reader": "reader1"}
# backend.hstreamdb.hook.session.subscribed.2  = {"topic": "pubsub/#", "reader": "reader1", "offline_opts": {"time_range": 10}}
# backend.hstreamdb.hook.session.subscribed.2  = {"topic": "pubsub/#", "reader": "reader1", "offline_opts": {"time_range": 20, "max_db_count": 10, "max_count": 5}}
backend.hstreamdb.hook.session.subscribed.2  = {"topic": "pubsub/#", "reader": "reader1"}
backend.hstreamdb.hook.message.publish.1     = {"topic": "pubsub/#", "producer": "producer2"}
backend.hstreamdb.hook.message.acked.1       = {"topic": "pubsub/#", "producer": "producer2"}


## offline_opts: the fetching offline msgs options
## time_range(in seconds): Only the messages within a period of time before the current moment will be fetched.
## max_db_count: The maximum number of messages that will be fetched from the server.
## max_count: The maximum number of messages that will be delivered to client.

########################################
## i.e.
## time_range = 10s,
## max_db_count = 5,
## max_count = 2
##
## [0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9] : Total 10 msgs in last 10 seconds
## [0 - 1 - 2 - 3 - 4 ]                    : apply `max_db_count`, 5 msgs
##            [ 3 - 4 ]                    : apply `max_count`, total 2 msgs will be delivered to client (3-4)
